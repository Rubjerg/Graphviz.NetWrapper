# This is a basic workflow to help you get started with Actions

name: win-build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch

on:
  workflow_call:
    outputs:
      artifact-name:
        description: "Windows bits"
        value: win-bits

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
      name: Checkout Code

    - name: Check if line endings are CRLF
      run: |
        bash -c "git grep -rlIP -- ':!GraphvizWrapper/graphvizfiles/*' ':!*.sh' | xargs unix2dos"
        git diff --exit-code

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup NuGet.exe for use with actions
      uses: NuGet/setup-nuget@v1.0.5

    - name: Restore Tools
      run: dotnet tool restore

    - name: Restore NuGet Packages
      run: nuget restore Rubjerg.Graphviz.sln

    - name: Build App
      run: msbuild Rubjerg.Graphviz.sln /p:Configuration=Release

    - name: Restore (just built) NuGet Packages for Tests
      run: nuget restore Rubjerg.Graphviz.Tests.sln

    - name: Build Tests
      run: msbuild Rubjerg.Graphviz.Tests.sln /p:Configuration=Release

    - name: Run Unittests Without Coverage (.NET 8)
      run: bash run-tests-netcore.sh Rubjerg.Graphviz.Test\Rubjerg.Graphviz.Test.csproj

    - name: Run Transitive Tests (.NET 8)
      run: bash run-tests-netcore.sh Rubjerg.Graphviz.TransitiveTest\Rubjerg.Graphviz.TransitiveTest.csproj

    - name: Check if README is up-to-date
      run: git diff --exit-code -- README.md

    - name: Check if code is formatted
      run: dotnet format whitespace --verify-no-changes -v diag Rubjerg.Graphviz.sln
      
    - name: Check if code is formatted
      run: dotnet format whitespace --verify-no-changes -v diag Rubjerg.Graphviz.Tests.sln

    - name: Check for loose ends
      run: |
        bash -c "! git grep 'FIX''NOW'"


    # Locate the package that GeneratePackageOnBuild just produced
    - name: Locate nupkg
      id: pkg
      shell: pwsh
      run: |
        # search everywhere under Rubjerg.Graphviz\bin\ for the first package
        $pkg = Get-ChildItem Rubjerg.Graphviz\bin -Recurse -Filter "Rubjerg.Graphviz.*.nupkg" -File |
               Where-Object { $_.Name -notlike "*.symbols.nupkg" } |
               Select-Object -First 1

        if (-not $pkg) { throw "Rubjerg.Graphviz nupkg not found" }

        "package=$($pkg.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    # Upload that single file
    - uses: actions/upload-artifact@v4
      with:
        name: win-bits
        path: ${{ steps.pkg.outputs.package }}
        retention-days: 3
