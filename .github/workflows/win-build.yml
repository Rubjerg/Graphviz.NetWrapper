# This is a basic workflow to help you get started with Actions

name: win-build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch

on:
  workflow_call:
    outputs:
      artifact-name:
        description: "Windows bits"
        value: win-bits

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
      name: Checkout Code

    - name: Check if line endings are CRLF
      run: |
        bash -c "git grep -rlIP -- ':!GraphvizWrapper/graphvizfiles/*' ':!*.sh' | xargs unix2dos"
        git diff --exit-code

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup NuGet.exe for use with actions
      uses: NuGet/setup-nuget@v1.0.5

    - name: Restore Tools
      run: dotnet tool restore

    - name: Restore NuGet Packages
      run: nuget restore Rubjerg.Graphviz.sln

    - name: Build App
      run: msbuild Rubjerg.Graphviz.sln /p:Configuration=Release

    - name: Check if README is up-to-date
      run: git diff --exit-code -- README.md

    - name: Check if code is formatted
      run: dotnet format whitespace --verify-no-changes -v diag Rubjerg.Graphviz.sln
      
    - name: Check if code is formatted
      run: dotnet format whitespace --verify-no-changes -v diag Rubjerg.Graphviz.NugetTests.sln

    - name: Run Unittests Without Coverage (.NET 8)
      run: bash run-tests-netcore.sh Rubjerg.Graphviz.Test\Rubjerg.Graphviz.Test.csproj

    - name: Run Unittests With Coverage Calculation (.NET 4.8)
      run: packages\opencover\4.7.1221\tools\OpenCover.Console.exe -skipautoprops -returntargetcode -register '-target:bash.exe' -targetargs:'nunit-console.sh Rubjerg.Graphviz.Test\bin\x64\Release\net48\Rubjerg.Graphviz.Test.dll'  '-filter:+[Rubjerg*]* -[Rubjerg.Graphviz.Test*]*'

    - name: Upload Coverage data
      run: |
        echo "C:\msys64\usr\bin" >> $GITHUB_PATH
        Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
        bash codecov.sh -f "results.xml"

    - name: Run Transitive Tests (.NET 8)
      run: bash run-tests-netcore.sh Rubjerg.Graphviz.TransitiveTest\Rubjerg.Graphviz.TransitiveTest.csproj

    - name: Run Transitive Tests (.NET 4.8)
      run: bash nunit-console.sh Rubjerg.Graphviz.TransitiveTest\bin\x64\Release\net48\Rubjerg.Graphviz.TransitiveTest.dll

    - name: Restore NuGet Packages for Nuget Tests (from local package source)
      run: nuget restore Rubjerg.Graphviz.NugetTests.sln

      # FIXNOW
    # - name: Build Nuget Test Solution
    #   run: msbuild Rubjerg.Graphviz.NugetTests.sln /p:Configuration=Release

    # - name: Run Nuget Tests (.NET 8)
    #   run: bash run-tests-netcore.sh Rubjerg.Graphviz.NugetTest\Rubjerg.Graphviz.NugetTest.csproj

    # - name: Run Nuget Tests (.NET 4.8)
    #   run: bash nunit-console.sh Rubjerg.Graphviz.NugetTest\bin\x64\Release\net48\Rubjerg.Graphviz.NugetTest.dll

    # - name: Run Transitive Nuget Tests (.NET 4.8)
    #   run: bash nunit-console.sh Rubjerg.Graphviz.TransitiveNugetTest\bin\x64\Release\net48\Rubjerg.Graphviz.TransitiveNugetTest.dll

    # - name: Run Transitive Nuget Tests (.NET 8)
    #   run: bash nunit-console.sh Rubjerg.Graphviz.TransitiveNugetTest\bin\x64\Release\net8.0\Rubjerg.Graphviz.TransitiveNugetTest.dll

    # - name: Check for loose ends
    #   run: |
    #     bash -c "! git grep 'FIX''NOW'"


    # Locate the package that GeneratePackageOnBuild just produced
    - name: Locate nupkg
      id: pkg
      shell: pwsh
      run: |
        $pkg = Get-ChildItem -Recurse -Filter "*.nupkg" | Select-Object -First 1
        "package=$($pkg.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    # Upload that single file
    - uses: actions/upload-artifact@v4
      with:
        name: win-bits
        path: ${{ steps.pkg.outputs.package }}
        retention-days: 3
